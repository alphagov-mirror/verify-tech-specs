##Use of Authentication Request protocol

The steps between the service provider (authentication steps), hub
service and identity provider in this profile are based on the
Authentication Request protocol defined in \[SAMLCore\]. In the
nomenclature of actors enumerated in Section 3.4 of that document, the
service provider is the request issuer and the relying party, and the
principal is the presenter, requested subject, and confirming entity.

###\<AuthnRequest\> Usage

All processing rules are as defined in \[SAMLCore\].

If the asserting entity cannot or will not satisfy the request, it MUST
respond with a `<Response>` message containing an appropriate error
status code or codes.

The `<AuthnRequest>` MUST be signed.

The `<Issuer>` element MUST be present and MUST contain the unique
identifier of the requesting entity (either a service provider or hub
service); the Format attribute MUST be omitted or have a value of
`urn:oasis:names:tc:SAML:2.0:nameid-format:entity`.

In the case of an `<AuthnRequest>` from the hub service to an IdP, the
`<RequestedAuthnContext>` element MUST be set to indicate the requested
and minimum level of assured identity the service provider requires for
this principal as provided in relying party (SP) metadata. For further
details on the valid authentication context values refer to the
accompanying document "*Identity Assurance Hub Service Profile -
Authentication Contexts v1.2*".

If the `<NameIDPolicy>` is included, then it MUST contain the Format
attribute and it MUST be set with a value of
`urn:oasis:names:tc:SAML:2.0:nameid-format:persistent`.

The `<Scoping>` element MUST NOT be present in the `<AuthnRequest>`
message issued by the service provider. The `<Scoping>` element MUST be
present in the `<AuthnRequest>` message issued by the hub service and
MUST have the ProxyCount attribute set to ProxyCount=0.

There will be occasions when a service provider will have no record of
the identity being asserted but may wish to create a new local 'account'
for the user in order to continue to transact. If the service provider
wishes to permit the asserting entity to establish a new identifier for
the principal if none exists, it MUST include a `<NameIDPolicy>` element
with the AllowCreate attribute set to "true". Otherwise, only a
principal for whom the asserting entity has previously established an
identifier usable by the service provider can be authenticated
successfully.

The hub service MUST specify the SPNameQualifier attribute and it MUST
have a value.

The service provider and the hub service MUST NOT include an
AssertionConsumerServiceURL attribute. Instead the service provider MAY
use the AssertionConsumerServiceIndex attribute for specifying where the
response should be sent.

The asserting entity (e.g. identity provider) MUST ensure that any
AssertionConsumerServiceIndex attribute in the request is validated
against the known range of service indexes belonging to the requesting
entity.

The service provider MAY specify the ProtocolBinding attribute and if it
does it MUST have a value of
`urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST`.

Metadata for the service provider issuing the `<AuthnRequest>` MUST
contain at least one `<AssertionConsumingService>`. The service provider
MUST define at least one `<AssertionConsumingService>` with an attribute
isDefault set to \"true\".

If required, the service provider MAY specify an
AssertionConsumerServiceIndex attribute to override the default index.
This value MUST match a correct attribute index for that service as
defined and exchanged in metadata.

The hub service MAY define a `<Conditions>` element within the
`<AuthnRequest>` that includes a NotOnOrAfter attribute specifying time
limits on the validity of any resulting assertion within the context of
this profile. If the time window specified in any NotOnOrAfter attribute
expires the IdP MUST return a response including the status
NoAuthnContext to the hub service. This will allow the hub service to
provide assistance to the user where possible. Following a timeout the
hub service may issue a new request to the IdP with the same Request ID
as the original expired request; the IdP MUST treat this as a new
authentication request.

The IsPassive attribute MUST NOT be set.

###\<Response\> Usage

If the attesting entity wishes to return an error, it MUST NOT include
any assertions in the `<Response>` message. Otherwise if the request is
successful the `<Response>` element must conform to the following
statements:

-   The `<Issuer>` element MUST be present and it MUST contain the
    unique identifier of the issuing attesting entity. The Format
    attribute MUST be omitted or have a value of
    `urn:oasis:names:tc:SAML:2.0:nameid-format:entity`.
-   The `<Response>` message MUST contain at least one `<Assertion>`. An
    identity provider `<Response>` message MUST contain two
    `<Assertion>` elements.
-   The `<Response>` MUST contain an InResponseTo attribute set to the
    value contained in the original `<AuthnRequest>`.
-   Each assertion MUST contain a `<Subject>` element with at least one
    `<SubjectConfirmation>` element containing a Method of
    `urn:oasis:names:tc:SAML:2.0:cm:bearer`.
-   Each assertion MUST contain a `<NameID>` element. The Format MUST be
    set to `urn:oasis:names:tc:SAML:2.0:nameid-format:persistent`.
-   The bearer `<SubjectConfirmation>` element for the assertion
    described above MUST contain a `<SubjectConfirmationData>` element.
    Within the `<SubjectConfirmationData>` element, the Recipient MUST
    contain the value from `<Issuer>` in the associated
    `<AuthnRequest>`, as well as the NotOnOrAfter attribute that limits
    the window during which the assertion can be delivered. It MAY
    contain an Address attribute limiting the client address from which
    the assertion can be delivered. It MUST NOT contain a NotBefore
    attribute. The InResponseTo attribute MUST be provided and match the
    `<AuthnRequest>` ID.
-   The bearer assertion MUST NOT contain an `<AudienceRestriction>`.
-   The assertion containing the matching data MUST contain an
    `<AuthnStatement>` that reflects the level of assurance (LoA) being
    asserted by the identity provider. No other `<AuthnStatement>`
    should be provided in the authentication context associated with the
    matching data assertion.
-   The assertion containing contextual information related to the
    authentication event MUST contain at least one `<AuthnStatement>`
    that reflects the authentication of the principal to the attesting
    entity.
-   The assertion containing contextual information related to the
    authentication event MUST contain at least one `<SubjectLocality>`
    element containing the DNS name and the IP address of the system
    from which the SAML subject was authenticated[^10].
-   The `<AuthnStatement>` MUST contain an `<AuthnContext>` element
    which itself MUST contain an `<AuthnContextClassRef>` element with
    one of the SAML 2.0 defined authentication context classes.
-   The assertion containing matching data MUST contain an
    `<AttributeStatement>` with at least one `<Attribute>` element. For
    requests that have included attribute enrichment, the `<Attribute>`
    and `<AttributeValue>` elements MUST contain the service provider
    specific identifier for the principal. For requests that have not
    included attribute enrichment, the `<Attribute>` and
    `<AttributeValue>` elements MUST contain the matching dataset
    attributes. A full definition of SAML Attributes relating to this
    SAML Profile can be found in *"Identity Assurance Hub Service
    Profile - SAML Attributes v1.2"*.
-   The entire assertion MUST be encrypted for the hub. This is the case
    for all assertions to the hub.
-   Where a NotOnOrAfter attribute is specified in the `<Conditions>`
    element provided in the `<AuthnRequest>`, validity of the assertion
    MUST be limited accordingly.
-   Other conditions MAY be included as requested by the service
    provider, the hub service, or at the discretion of the attesting
    entity. (Of course, all such conditions MUST be understood by and
    accepted by the service provider in order for the assertion to be
    considered valid.) The attesting entity is not obligated to honour
    the requested set of `<Conditions>` in the `<AuthnRequest>`, if
    any.[^11]

Where the attesting entity wishes to return an error, it MUST NOT
include any assertions of identity in the `<Response>` message. An
Identity Provider MUST return an authentication event assertion where
this is available regardless of the error condition. Details of the
error must be returned in the form of a status code and any associated
sub-status code as specified in the relevant process step.

###\<Response\> Message Processing Rules

The service provider MUST process the `<Response>` message and the
enclosed `<Assertion>` element as described in \[SAMLCore\] and
\[SAMLProfile\].

###POST-Specific Processing Rules

The service provider and the hub service MUST ensure that bearer
assertions are not replayed, by maintaining the set of used ID
values for the length of time for which the assertion would be
considered valid based on the NotOnOrAfter attribute in the
`<SubjectConfirmationData>`.


####Unsolicited Responses

An attesting entity MUST NOT initiate this profile by delivering an
unsolicited `<Response>` message to a service provider.

###Use of Attribute Query protocol

The steps between the hub service and matching service in this profile
are based on the Assertion Query and Request Protocol, specifically, the
AttributeQuery definition within \[SAMLCore\].

###`<AttributeQuery>` Usage

All processing rules are as defined in \[SAMLCore\].

The `<AttributeQuery>` message MUST be signed by the hub service and
MUST contain the `<Issuer>` element.

The ID attribute in the `<AttributeQuery>` MUST be set to the same value
as the ID attribute from the original `<AuthnRequest>`

The message MUST contain one `<NameID>` element of type PrincipalIDType
as defined in section 3.1

The synchronous SOAP binding MUST be used to send the `<AttributeQuery>`
request.

####\<AttributeQuery\> Processing Rules

The service provider matching service SHOULD use its local identity
mapping service first to determine if it already has a match for the
principal based on the existence of the locally generated version of
Identifier (based on the identifier in the `<AttributeQuery>`)
mapped to a local identity. If an entry exists, then the service
provider matching service SHOULD NOT execute a new identity match
for that principal.

If no entry exists in the identity mapping service for the
locally-generated Identifier, the service provider matching service
MUST attempt to uniquely match the principal in the request to a
uniquely identified local principal. All of the values within the
assertions received from the hub service MAY be used for this
purpose.

Upon finding a unique match, the service provider matching service
SHOULD store a mapping between the locally-generated Identifier
value and the local unique identifier for that principal.

If no unique match is found, the service provider matching service
SHOULD identify, from the list of results, which additional
attributes would enable a unique match to be made. The service
provider matching service MUST return a `<Response>` message to the
hub service containing an error and MAY contain the list of required
attributes. Any required attributes contained in the `<Response>`
MUST be a subset of the matching process attributes contained in the
provider's metadata already exchanged with the hub service. See
section 2.1.3.16.1 for a list of status codes to use.[^12]

The service provider matching service MUST validate that the
InResponseTo attribute values of all of the signed assertions in the
`<AttributeQuery>` to ensure they match the ID value of the
`<AttributeQuery>`. An error MUST be generated where this validation
fails and the authentication forced to fail. It should be noted that
the most likely cause of this error will be an attack on the
matching service.

###Attribute Query \<Response\> Usage

The service provider matching service MUST return a response to the
hub service.

The `<Response>` MUST contain an InResponseTo attribute set to the ID
value contained in the original `<AttributeQuery>`.

The `<Response>` MUST include a copy of the `<AuthnContext>` as provided
in the IDP authentication event assertion `<AuthnStatement>`. This
information will allow the service to act upon the level of assurance
reached by the principal during authentication if this has not met the
minimum required level.

The `<Response>` message and `<Assertion>` MUST be signed. The
`<Assertion>` MUST be encrypted for the hub service by the service
provider matching service after it is signed.
